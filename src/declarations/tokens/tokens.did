type UserId = principal;
type TreasuryId__1 = nat32;
type TreasuryId = nat32;
type TreasuryFrozenData = 
 record {
   copyrightHolding: nat;
   copyrightToken: TokenId__1;
   createdDate: int;
   governanceHolding: nat;
   governanceToken: TokenId__1;
   id: TreasuryId;
   recordId: RecordId__1;
 };
type TokenType = 
 variant {
   copyright;
   governance;
 };
type TokenId__1 = nat32;
type TokenId = nat32;
type Token = 
 record {
   createdDate: int;
   id: TokenId__1;
   recordId: RecordId__1;
   symbol: text;
   tokenType: TokenType;
   totalSupply: nat;
 };
type RecordId__1 = nat32;
type RecordId = nat32;
type NewToken = 
 record {
   createrTokens: nat;
   recordId: RecordId__1;
   symbol: text;
   tokenType: TokenType;
   totalSupply: nat;
   treasuryTokens: nat;
 };
service : {
  addRecord: (RecordId) -> (bool);
  addRecordToUserAccount: (RecordId) -> () oneway;
  createTokenOffer: (nat, nat) -> () oneway;
  createTokens: (UserId, NewToken, NewToken) -> (TreasuryId__1);
  getAllTokens: () -> (vec Token);
  getAllTreasury: () -> (vec TreasuryFrozenData) query;
  getRecordICPAccount: (RecordId) -> () oneway;
  getTokenOffer: (nat, nat) -> () oneway;
  getTransferHistory: () -> () oneway;
  getUserRecordList: (UserId) -> (vec RecordId);
  getUserTokenList: (UserId) -> (vec TokenId);
  initializeEmptyValuesForUser: (UserId) -> ();
  tokenMinting: (UserId, nat) -> () oneway;
  transferContributionReward: () -> () oneway;
  transferTokens: (UserId) -> () oneway;
}
